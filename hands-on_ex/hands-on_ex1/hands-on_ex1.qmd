---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
editor: visual
---

## Overview

In this hands-on exercise, I've learnt how to import and perform data wrangling on geospatial data using appropriate R packages.

## Getting Started

The code chunk below installs and loads [sf](https://r-spatial.github.io/sf/) and tidyverse packages into R environment.

```{r}
pacman::p_load(sf, tidyverse)
```

## Importing Geospatial Data

The following geospatial data will be imported in T by using [st_read()](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package.

-   MP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,

-   CyclingPath, a line feature layer in ESRI shapefile format, and

-   PreSchool, a point feature layer in kml file format.

### Importing polygon feature data

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

### Importing polyline feature data

```{r}
cyclingpath <- st_read(dsn = "data/geospatial", layer = "CyclingPath")
```

### Importing GIS data

```{r}
preschool <- st_read("data/geospatial/pre-schools-location-kml.kml")
```

## Checking the Content of A Simple Feature Data Frame

### Working with st_geometry()

```{r}
st_geometry(mpsz)
```

### Working with glimpse()

```{r}
glimpse(mpsz)
```

### Working with head()

```{r}
head(mpsz, n=5)
```

## Plotting the Geospatial Data

The following plots are obtained to have a better visualization of the geospatial features.

```{r}
plot(mpsz)
```

We could also plot only the geometry as shown below.

```{r}
plot(st_geometry(mpsz))
```

As well as choosing only a specific attribute to be plotted as shown below.

```{r}
plot(mpsz["PLN_AREA_N"])
```

Using *plot()* for plotting geospatial objects offers a quick look. For high cartographic quality plot, other R package such as tmap should be used.

## Working with Projection

To perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system. **Projection transformation** allows a simple feature data frame to be projected from one coordinate system to another coordinate system.

### Assigning EPSG code to a simple feature data frame

```{r}
st_crs(mpsz)
```

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

```{r}
st_crs(mpsz3414)
```

### Transforming the projection of preschool from wgs84 to svy21

Data in geographic coordinate system is not appropriate when distance or/and area measurements are required. In the following, the geographic coordinate system is projected to another coordinate system mathematically.

```{r}
preschool3414 <- st_transform(preschool, crs = 3414)
```

## Importing and Converting An Aspatial Data

### Importing the aspatial data

The following listings is an aspatial data which captures the x- and y-coordinates of the data points. Aspatial data is unlike geospatial data which contains information about a specific location on the Earth's surface.

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

```{r}
list(listings)
```

### Creating a simple feature data frame from aspatial data frame

In the following, a simple feature data frame is created and the data is transformed into a svy21 projected coordinates system. In the resulting data frame, the `longitude` and `latitude` columns will be removed and a new column `geometry` is added.

```{r}
listings_sf <- st_as_sf(listings,
                        coords = c("longitude", "latitude"),
                        crs=4326) %>% 
    st_transform(crs = 3414)
```

```{r}
glimpse(listings_sf)
```

## Geoprocessing with sf package

In this section, two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count will be performed.

### Buffering

The following computes 5-meter buffers (extensions) around cycling paths by using [st_buffer()](https://r-spatial.github.io/sf/reference/geos_unary.html) and then computing the corresponding area of the buffers using st_area().

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist = 5, nQuadSegs = 30)
```

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

```{r}
sum(buffer_cycling$AREA)
```

### Point-in-polygon count

In the following, we want to identify the number of pre-schools in each planning subzone. This is done by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html) to identify the pre-schools in each planning subzone and then followed by using [length()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) to calculate the number of pre-schools in each planning subzone.

```{r}
mpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschool3414))
```

We run the following to check the summary statistics of the newly derived *PreSch Count* field.

```{r}
summary(mpsz3414$`PreSch Count`)
```

The following lists the planning subzone with the most number of pre-schools.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

Next, we want to calculate the density of pre-schools for each planning subzone. We will first derive the area of each planning subzone by using [st_area()](https://r-spatial.github.io/sf/reference/geos_measures.html) before computing the density.

```{r}
mpsz3414$Area <- mpsz3414 %>% 
    st_area()
```

```{r}
mpsz3414 <- mpsz3414 %>% 
    mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## Exploratory Data Analysis

In this section, we will use ggplot2 functions to create functional and statistical graphs for EDA.

First, we will use a histogram to reveal the distribution of `PreSch Density`.

```{r}
hist(mpsz3414$`PreSch Density`)
```

As *hist()* does not provide much customization, we will use ggplot2 function instead.

```{r}
ggplot(data = mpsz3414,
       aes(x = as.numeric(`PreSch Density`))) +
    geom_histogram(bins = 20,
                   color = "black",
                   fill = "light blue") +
    labs(title = "Are pre-schools evenly distributed in Singapore?",
         subtitle = "There are many planning subzones with a single pre-school. On the other hand, \nthere are two planning subzones with at least 20 pre-schools.",
         x = "Pre-school density (per km sq)",
         y = "Frequency")
```

We can also visualize the *pre-school count* against *pre-school density* by using a scatterplot.

```{r}
ggplot(data = mpsz3414,
       aes(x = as.numeric(`PreSch Density`),
           y = as.numeric(`PreSch Count`))) +
    geom_point() +
    labs( x = "Pre-school density (per kem sq)",
          y = "Pre-school count") + 
    xlim(0, 40) +
    ylim(0, 40)
```

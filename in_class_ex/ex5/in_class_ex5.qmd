---
title: "In-Class Exercise 5"
editor: visual
---

## 1 Overview

In this In-Class Exercise, we will demonstrate the basic concepts and methods of logistic regression specially designed for geographical data. In particular, we will demonstrate the following:

-   explain the similarities and differences between Logistic Regression (LR) algorithm versus geographical weighted Logistic Regression (GWLR) algorithm.

-   calibrate predictive models by using appropriate Geographically Weighted Logistic Regression algorithm for geographical data.

## 2 The Data

In this exercise, we will analyse the data from Nigeria. There are 2 datasets used, as outlined in sections 2.1 and 2.2. We will have chosen Osun for this analysis as this state has a relatively high proportion of non-functional water points compared to the other states in Nigeria.

### 2.1 Aspatial Data

Data was downloaded from [WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/) in a csv format. The WPdx+ data set was filtered for "nigeria" in the column *clean_country_name* before downloading. There is a total of 95,008 unique water point records.

### 2.2 Geospatial Data

Nigeria Level-2 Administrative Boundary (also known as Local Government Area, LGA) polygon features GIS data was downloaded from [geoBoundaries](https://www.geoboundaries.org/).

## 3 Getting Started

The R packages needed for this exercise are as follows:

```{r}
pacman::p_load(sf, tidyverse, funModeling, blorr, corrplot, ggpubr, spdep, GWmodel, tmap, skimr, caret)
```

## 4 Importing the Analytical Data

In the following code chunk, we will import *Osun.rds* and *Osun_wp_sf.rds* that have been previously tidied by using `read_rds()`. In *Osun.rds*, we have kept the geographical boundary for Osun state to allow for better plotting later.

```{r}
Osun <- read_rds("rds/Osun.rds")
Osun_wp_sf <- read_rds("rds/Osun_wp_sf.rds")
```

We check our independent variable i.e. *status* by running the following code chunk. We can see that it is a binary data - *TRUE* representing functional water points and *FALSE* representing non-functional water points. We can see that there are 55.5% functional water points and 44.5% non-functional water points.

```{r}
Osun_wp_sf %>% 
    freq(input = 'status')
```

```{r}
tmap_mode("view")
tm_shape(Osun)+
    tm_polygons(alpha=0.4)+
    tm_shape(Osun_wp_sf)+
    tm_dots(col="status",
            alpha=0.6)+
    tm_view(set.zoom.limits = c(9,12))
```

## 5 Exploratory Data Analysis

Regression models are very sensitive to excessive number of missing values (e.g. fields with more than 20-50% missing values, depending on the sample size). In this section, we will look at distribution of the variables. We will use `skimr()` which will allow the results to be displayed in a nice report.

```{r}
    Osun_wp_sf %>% 
    skim()
```

We can also see the number of missing values in each field. For instance, *install_year* has 1144 missing values out of a total of 4760 records for Osun. In this case, we cannot use this field (24% missing values) although it is a useful variable since we know water points that are beyond 8-9 years are more likely to be non-functional.

On the other hand, we can see that fields *local_population_1km* and *water_point_population* both have 4 missing values, which is a small number of records, and hence we can still use these 2 fields.

In the following code chunk, we will select the independent variables that we will use for our regression model and to exclude records that have missing values. We will use `as.factor()` for *usage_capacity* as there are only specific values for the capacity of the water points, hence, we should not treat this field as a continuous variables and instead, make the values as factor.

```{r}
Osun_wp_sf_clean <- Osun_wp_sf %>% 
    filter_at(vars(status,
                   distance_to_primary_road,
                   distance_to_secondary_road,
                   distance_to_tertiary_road,
                   distance_to_city,
                   distance_to_town,
                   water_point_population,
                   local_population_1km,
                   usage_capacity,
                   is_urban,
                   water_source_clean),
              all_vars(!is.na(.))) %>% 
    mutate(usage_capacity = as.factor(usage_capacity))
```

## 6 Correlation Analysis

In this section, we want to know if any of the numerical independent variables are correlated. We will first need to drop the geometry column in the spatial data *Osun_wp_sf_clean* so that the geometry field does not interfere with correlation analysis.

```{r}
Osun_wp <- Osun_wp_sf_clean %>% 
    select(c(7,35:39,42:43,46:47,57)) %>% 
    st_set_geometry(NULL)
```

We can then perform correlation analysis only on the numerical variables.

```{r}
cluster_vars.cor = cor(
    Osun_wp[,2:7])
corrplot.mixed(cluster_vars.cor,
               lower = "ellipse",
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

We can see that there is no multicollinearity observed among the numerical variables (no coefficient greater than 0.8).

## 7 Building a Logistic Regression Model

In the following code check, we will use `glm` of R to calibrate a logistic regression model for the water point status.

```{r}
model <- glm(status ~ distance_to_primary_road+
                       distance_to_secondary_road+
                       distance_to_tertiary_road+
                       distance_to_city+
                       distance_to_town+
                       is_urban+
                       usage_capacity+
                       water_source_clean+
                       water_point_population+
                       local_population_1km,
                   data = Osun_wp_sf_clean,
                   family = binomial(link = 'logit'))
```

In the results for model, we can see that fitted.values are all probability values which is our y-hat.

We will then use `blr_regress()` from [**blorr**](https://blorr.rsquaredacademy.com/) package to generate a report for the model results.

```{r}
blr_regress(model)
```

We can see that *distance_to_primary_road* and *distance_to_secondary_road* has p-value greater than 0.05, we will subsequently exclude these 2 fields which are not statistically significant (i.e. p-value \< 0.05). For categorical variables, a positive value indicates an average correlation and a negative value implies a below average correlation.

For continuous variables, a positive value implies a direct correlation and a negative value implies an inverse relation, while the magnitude of the coefficient represents the strength of the correlations. We will make this analysis for the continuous variables after we have confirmed that they are statistically significant.

In the code chunk below, `blr_confusion_matrix()` from **blorr** package to prepare a confusion matrix. We will use cutoff = 0.5, this means that if the fitted.values sf greater than 0.5, we will label the water point as functional, and if the fitted.values determined is less than 0.5, we will label the water point as non-functional. (The validity of the cutoff is measured using accuracy, sensitivity, and specificity).

```{r}
blr_confusion_matrix(model, cutoff = 0.5)
```

We can also see that our accruracy is approximately 67.4%. The sensitivity is higher than the specificity, indicating that our true positive is higher (correctly determined approximately 72% true positive) than the true negative (model correctly determines approximately 62% true negative).

## 8 Building Geographically Weighted Logistic Regression (gwLR) Models

### 8.1 Converting from sf to sp data frame

We will use `select()` from **dplyr** package to select the variables fo interest. We will convert the data to SpatialPointsDataFrame data type for compatibility with subsequent packages. We will need to use Osun_wp_sf_clean which excludes the 4 polygons with missing values as polygons with missing values will cause an error prompt.

```{r}
Osun_wp_sp <- Osun_wp_sf_clean %>% 
    select(c(status,
             distance_to_primary_road,
             distance_to_secondary_road,
             distance_to_tertiary_road,
             distance_to_city,
             distance_to_town,
             water_point_population,
             local_population_1km,
             is_urban,
             usage_capacity,
             water_source_clean)) %>% 
    as_Spatial()
Osun_wp_sp
```

Since our geometry data is already in projected coordinate format, we can set the longlat as FALSE (the following result will match the SI unit of the projected coordinate system). We will set the argument *adaptive* to FALSE which indicates that we are interested to compute the fixed bandwidth. We will leave all variables including *distance_to_primary_road* and *distance_to_secondary_road* in the following code chunk.

### 8.2 Building Fixed Bandwidth GWR Model

We can plot a basic gwlr using the bandwidth obtained earlier.

#### 8.2.1 Computing Fixed Bandwidth

```{r}
bw.fixed <- bw.ggwr(status ~ distance_to_primary_road+
                           distance_to_secondary_road+
                           distance_to_tertiary_road+
                           distance_to_city+
                           distance_to_town+
                           is_urban+
                           usage_capacity+
                           water_source_clean+
                           water_point_population+
                           local_population_1km,
                   data = Osun_wp_sp,
                   family = "binomial",
                   approach = "AIC",
                   kernel = "gaussian",
                   adaptive = FALSE,
                   longlat = FALSE)
```

```{r}
bw.fixed
```

We obtain a fixed bandwidth of 2599.672 m (projection in Nigeria is in metres), which is approximately 2.6 km.

#### 8.2.2 Building fixed bandwidth model

```{r}
gwlr.fixed <- ggwr.basic(status ~ distance_to_primary_road+
                           distance_to_secondary_road+
                           distance_to_tertiary_road+
                           distance_to_city+
                           distance_to_town+
                           is_urban+
                           usage_capacity+
                           water_source_clean+
                           water_point_population+
                           local_population_1km,
                   data = Osun_wp_sp,
                   bw = bw.fixed,
                   family = "binomial",
                   kernel = "gaussian",
                   adaptive = FALSE,
                   longlat = FALSE)
```

```{r}
gwlr.fixed
```

From the results, we can see that the Geographically Weighted Regression model has a lower AIC compared to the Generalised Linear Regression. We cannot use the AICc because the global model (Generalised Linear Regression, which does not have geographical information) does not have AICc. This tells us that Geographically Weighted Regression model has improved explainability.

### 8.3 Model Assessment

#### 8.3.1 Converting SDF into sf data.frame

To assess the model, we will first convert the model into SFD object as data.frame using the following code chunk.

```{r}
gwr.fixed <- as.data.frame(gwlr.fixed$SDF)
```

Next, we will label the yhat values (i.e. predicted probability) greater or equal to 0.5 into 1 and else 0. The result of the logic comparison operation will be saved into a field called *most*.

```{r}
gwr.fixed <- gwr.fixed %>% 
    mutate(most = ifelse(
        gwr.fixed$yhat >= 0.5, T, F))
```

We will use `confusionMatrix()` from **caret** package to generate the confusion matrix. We define *data* argument to be the predicted probability and *reference* argument to be the actual label (i.e. ground truth).

```{r}
gwr.fixed$y <- as.factor(gwr.fixed$y)
gwr.fixed$most <- as.factor(gwr.fixed$most)
CM <- confusionMatrix(data=gwr.fixed$most, reference = gwr.fixed$y)
CM
```

When we compare the overall accuracy is now improved to 88.37% (geographically weighted) compared to the 67.39% that we obtained initially in the non-geographically weighted. In addition, the sensitivity improved from 72% to 86%. Also specificity improved from 62% to 90%. This implies we should apply a local strategy (looking at surrounding neighbours) instead of a global strategy to understand the factors for water points being functional or non-functional.

(Note that for the global model, you can see the coefficients of each independent variable. But we do not see this for the local geographically weighted model because one model is built for each state, and hence there are over 4000+ of such coefficients for each variable).

```{r}
Osun_wp_sf_selected <- Osun_wp_sf_clean %>% 
    select(c(ADM2_EN, ADM2_PCODE,
             ADM1_EN, ADM1_PCODE,
             status))
```

```{r}
gwr_sf.fixed <- cbind(Osun_wp_sf_selected, gwr.fixed)
```

### 8.4 Visualising gwLR

The following code chunk below is used to create an interactive point symbol map to compare the actual status of the water points against the status of the water points predicted by gwLR.

```{r}
tmap_mode("view")
prob_T <- tm_shape(Osun)+
    tm_polygons(alpha = 0.1)+
    tm_shape(gwr_sf.fixed)+
    tm_dots(col = "yhat",
            border.col = "gray60",
            border.lwd = 1)+
    tm_view(set.zoom.limits = c(8,14))
prob_T
```

In the following, we will visualise how the standard error of coefficient and t-value for the field *distance_to_tertiary_road* differs for the local models obtained for each LGA in Osun.

The standard error of the coefficient measures how precisely the model estimates the coefficient's unknown value. The standard error of the coefficient is always positive.

The smaller the standard error, the more precise the estimate. Dividing the coefficient by its standard error calculates a t-value.

```{r}
tertiary_TV <- tm_shape(Osun)+
    tm_polygons(alpha=0.1)+
    tm_shape(gwr_sf.fixed)+
    tm_dots(col="distance_to_tertiary_road_TV",
            border.col="gray60",
            border.lwd = 1)+
    tm_view(set.zoom.limits = c(8,14))
tertiary_SE <- tm_shape(Osun)+
    tm_polygons(alpha=0.1)+
    tm_shape(gwr_sf.fixed)+
    tm_dots(col="distance_to_tertiary_road_SE",
            border.col="gray60",
            border.lwd = 1)+
    tm_view(set.zoom.limits = c(8,14))
tmap_arrange(tertiary_SE, tertiary_TV, asp=1, ncol=2, sync=TRUE)
```

With reference to the plot on the left, we can see that the standard error of coefficient for *distance_to_tertiary_road* is generally low for all areas (as indicated by the yellow dots), with exception of dots in red colour, i.e. LGAs in Atakumosa East.

## 9 Building Logistic Regression and Geographically Weighted Logistic Regression Models using only Statistically Significant Independent Variables

In this section, we will only use independent variables that are statistically significant. Like before, we will build both logistic regression model and geographically weighted logistic regression model and then compare the 2 models.

### 9.1 Logistic regression model

In the following code check, we will use `glm` of R to calibrate a logistic regression model for the water point status. We will exclude fields that are not statistically significant, i.e. *distance_to_primary_road* and *distance_to_secondary_road*.

```{r}
model_sig <- glm(status ~ distance_to_tertiary_road+
                       distance_to_city+
                       distance_to_town+
                       is_urban+
                       usage_capacity+
                       water_source_clean+
                       water_point_population+
                       local_population_1km,
                   data = Osun_wp_sf_clean,
                   family = binomial(link = 'logit'))
blr_regress(model_sig)
```

We can see that all independent variables used to build this model are statistically significant (i.e. p-value \< 0.05).

```{r}
blr_confusion_matrix(model_sig, cutoff = 0.5)
```

We can also see that our accuracy is approximately 67%. The sensitivity is also higher than the specificity, indicating that our true positive is higher (model has correctly determined approximately 72% true positive) than the true negative (model correctly determines approximately 61% true negative).

### 9.2 Geographically weighted logistic regression model (with fixed bandwidth)

#### 9.2.1 Converting from sf to sp data frame

We will first convert the data to a SpatialPointsDataFrame data type for compatibility with subsequent packages. In here, we have also excluded fields that are not statistically significant, i.e. *distance_to_primary_road* and *distance_to_secondary_road*.

```{r}
Osun_wp_sp_sig <- Osun_wp_sf_clean %>% 
    select(c(status,
             distance_to_tertiary_road,
             distance_to_city,
             distance_to_town,
             is_urban,
             usage_capacity,
             water_source_clean,
             water_point_population,
             local_population_1km)) %>% 
    as_Spatial()
Osun_wp_sp_sig
```

#### 9.2.2 Computing fixed bandwidth

Here, we will compute the fixed bandwidth that we will use to build the geographically weighted logistic regression model.

```{r}
bw.fixed.sig <- bw.ggwr(status ~ distance_to_tertiary_road+
                       distance_to_city+
                       distance_to_town+
                       is_urban+
                       usage_capacity+
                       water_source_clean+
                       water_point_population+
                       local_population_1km,
                   data = Osun_wp_sp_sig,
                   family = "binomial",
                   approach = "AIC",
                   kernel = "gaussian",
                   adaptive = FALSE,
                   longlat = FALSE)
```

```{r}
bw.fixed.sig
```

We obtain a fixed bandwidth of 2377.371 m (projection in Nigeria is in metres), which is approximately 2.4 km.

#### 9.2.3 Building fixed bandwidth model

Next, we will build a geographically weighted logistic regression model using the fixed bandwidth determined in the previous section.

```{r}
gwlr.fixed.sig <- ggwr.basic(status ~ distance_to_tertiary_road+
                       distance_to_city+
                       distance_to_town+
                       is_urban+
                       usage_capacity+
                       water_source_clean+
                       water_point_population+
                       local_population_1km,
                   data = Osun_wp_sp,
                   bw = bw.fixed.sig,
                   family = "binomial",
                   kernel = "gaussian",
                   adaptive = FALSE,
                   longlat = FALSE)
gwlr.fixed.sig
```

From the results, we can see that the Geographically Weighted Regression model has a lower AIC (i.e. 4418.776) compared to the Generalised Linear Regression (AIC = 5708.9). This tells us that Geographically Weighted Regression model has improved explainability.

### 9.3 Model Assessment

We will first convert the model into SFD object as data.frame using the following code chunk.

```{r}
gwr.fixed.sig <- as.data.frame(gwlr.fixed.sig$SDF)
```

Next, we will label the yhat values (i.e. predicted probability) greater or equal to 0.5 into 1 and else 0. The result of the logic comparison operation will be saved into a field called *most*.

```{r}
gwr.fixed.sig <- gwr.fixed.sig %>% 
    mutate(most = ifelse(
        gwr.fixed.sig$yhat >= 0.5, T, F))
```

We will use `confusionMatrix()` from **caret** package to generate the confusion matrix.

```{r}
gwr.fixed.sig$y <- as.factor(gwr.fixed.sig$y)
gwr.fixed.sig$most <- as.factor(gwr.fixed.sig$most)
CM <- confusionMatrix(data=gwr.fixed.sig$most, reference = gwr.fixed.sig$y)
CM
```

When we compare the overall accuracy is now improved to 88.46% (geographically weighted) compared to the 67.26% that we obtained initially in the non-geographically weighted logistic regression model. In addition, we also noted that both sensitivity and specificity increased significantly from 71.88% to 86.71% and 61.49% to 89.86% respectively. This implies we should apply a local strategy (i.e. gwLR - looking at surrounding neighbours) instead of a global strategy to understand the factors for water points being functional or non-functional.

### 9.4 Visualising gwLR

The following code chunk below is used to create an interactive point symbol map.

```{r}
gwr_sf.fixed.sig <- cbind(Osun_wp_sf_selected, gwr.fixed.sig)
tmap_mode("view")
prob_T <- tm_shape(Osun)+
    tm_polygons(alpha = 0.1)+
    tm_shape(gwr_sf.fixed.sig)+
    tm_dots(col = "yhat",
            border.col = "gray60",
            border.lwd = 1)+
    tm_view(set.zoom.limits = c(8,14))
prob_T
```

Likewise, we will visualise how the standard error of coefficient and t-value for the field *distance_to_tertiary_road* differs for the local models obtained for each state in Osun.

```{r}
tertiary_TV <- tm_shape(Osun)+
    tm_polygons(alpha=0.1)+
    tm_shape(gwr_sf.fixed.sig)+
    tm_dots(col="distance_to_tertiary_road_TV",
            border.col="gray60",
            border.lwd = 1)+
    tm_view(set.zoom.limits = c(8,14))
tertiary_SE <- tm_shape(Osun)+
    tm_polygons(alpha=0.1)+
    tm_shape(gwr_sf.fixed.sig)+
    tm_dots(col="distance_to_tertiary_road_SE",
            border.col="gray60",
            border.lwd = 1)+
    tm_view(set.zoom.limits = c(8,14))
tmap_arrange(tertiary_SE, tertiary_TV, asp=1, ncol=2, sync=TRUE)
```

With reference to the plot for standard error of coefficient, we can see that standard error of coefficient is generally low for all states (as indicated by pale yellow dots). However, we can see that for several water points in Aiyadade, the local model has a high standard error of coefficient for *distance_to_tertiary_road*. We can also observe from Section 8.4 and the plot here, that the gwLR model generated in section 8 and section 9 gives different local performance.
